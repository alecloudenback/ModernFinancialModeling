# The Practice of Financial Modeling

```{julia}
#| echo: false
#| output: false
using Pkg
Pkg.activate("env/fin_model")
Pkg.instantiate()
using CairoMakie
```

*Yun-Tien Lee and Alec Loudenback*

> “In theory there is no difference between theory and practice. In practice there is.” – Yogi Berra (often attributed)

## Introduction

Having covered what models are and what they accomplish, we turn to the *craft* of modeling: what distinguishes a good model from a bad model; likewise what are attributes of an astute practitioner. Lastly, we cover some more "nuts and bolts" topics such as data handling and good governance practices.

## What makes a good model?

The answer is: *it depends*.

### Achieving original purpose

A model is built for a specific set of reasons and therefore we must evaluate a model in terms of achieving that goal. We should not critique a model if we want to use it outside of what it was intended to do. This includes: contents of output and required level of accuracy.

A model may have been created to for scenario analysis to value all assets in a portfolio to within half a percent of a more accurate, but much more computationally expensive model. If we try to add a never-before-seen asset class or use the model to order trades, then we may be extending beyond the design scope of the original model and lose predictive accuracy.

### Usability

How easy is it for someone to use? Does it require pages and pages of documentation, weeks of specialized training and an on-call help desk? *All else equal*, it is an indicator of how usable the model is by the amount of support and training required. However, one may sometimes wish to create a highly capable, complex model which is known to require a high amount of experience and expertise. An analogy here might be the cockpit of a small Cessna aircraft versus a fighter jet: the former is a lot simpler and takes less training to master but is also more limited.

@fig-parametric illustrates this concept and shows that if your goal is very high capability that you may need to expect to develop training materials and support the more complex model. On this view, a better model is one that is able to have a shorter amount of time and experience to achieve the same level of capability.

```{julia}
#| label: fig-parametric
#| fig-cap: "Tradeoff between complexity and capability"
#| echo: false
using CairoMakie


f = Figure()
ax1 = Axis(
    f[1, 1],
    xlabel="Amount of Experience with Model",
    ylabel="Modeler's Capability with Model",
)

xs = 0:0.01:2.5
ys1 = exp.(xs) * 0.5
ys2 = sqrt.(xs) .+ 1

lines!(xs, ys1, linewidth=5, label="More complexity but more capable")
lines!(xs, ys2, linewidth=5, label="Less complexity but more limited")

hidedecorations!(ax1, label=false)
axislegend(ax1, halign=:left)

f
```

### Performance

Financial models are generally not used for their awe-inspiring beauty - users are results oriented and the faster a model returns the requested results, the better. Aside from direct computational costs such as server runtime, a shorter model runtime means that one can iterate faster, test new ideas on the fly, and stay focused on the problem at hand.

Many readers may be familiar with the cadence of (1) try running model overnight, (2) see results failed in the morning, (3) spend day developing, (4) repeat step 1. It is preferred if this cycle can be measured in minutes instead of hours or days.

Of course, requirements must be considered here too: needs for high frequency trading, daily portfolio rebalancing, and quarterly financial reporting models have different requirements when it comes to performance.

### Separation of Model Logic and Data

When data is intertwined with business logic it can be difficult to understand, maintain, or adapt a model. Spreadsheets are a common example of where data exists co-mingled with business logic. An alternative which separates data sources from the computations provides for better model service in the future.

### Organization of Model Components and Architecture

If model components or data inputs are spread out in a disorganized way, it can lead to usability and maintenance issues. As an example, often times it's incredibly difficult to ascertain a model's operation if inputs are spread out across locations on many spreadsheet tabs. Or if related calculations are performed in multiple locations, or if it's not clear where the line is drawn between calculations performed in the worksheets or in macros.

If logical components or related data are broken out into discrete parts of a model, it becomes easier to reason about model behavior or make modifications. Compartmentalization is an important principle which allows a larger model to remain comprised of simpler components where whole model is greater than the sum of the pieces.

### Abstraction of Modeled Systems

At different times we are interested in different **ladder of abstraction**: sometimes we are interested in the small details, but other times we are interested in understanding the behavior of systems at a higher level.

Say we are an insurance company with a portfolio of fixed income assets supporting long term insurance liabilities. We might delineate different levels of abstraction like so:

::: column-margin
![Think about moving up and down a ladder of abstraction when analyzing a problem.](assets/simple_ladder.png)
:::

|               | Item                                                 |
|---------------|------------------------------------------------------|
| More Abstract | Sensitivity of an entire company's solvency position |
|               | Sensitivity of a portfolio of assets                 |
|               | Behavior over time of an individual contract         |
| More granular | Mechanics of an individual bond or insurance policy  |

: An example of the different levels of abstraction when thinking about modeling an insurance company's assets and liabilites. {#tbl-insurance-ladder}

At different times, we are often interested in different aspects of a problem. In general, you start to be able to obtain more insights and a greater understanding of the system when you move up the ladder of abstraction.

In fact, a lot of designing a model is essentially trying to figure out where to put the right abstractions. What is the right level of detail to model this in and what is the right level of detail to expose to other systems?

Let us also distinguish between **vertical abstraction**, as described above, and **horizontal abstraction** which will refer to encapsulating different properties, or mechanics of components of model that effectively exist on the same level of vertical abstraction. For example, both asset and liability mechanics sit at the most granular level in @tbl-insurance-ladder, But it may make sense in our model to separate the data and behavior from each other. If we were to do that, that would be an example of creating horizontal abstraction in service of our overall modeling goals.

This book will introduce powerful, programmatic ways to handle this through things like packages, modules, namespaces, and functions.

## What makes a good modeler?

A model is nothing without its operator, and a skilled practitioner is worth their weight in gold. What elements separate a good modeler from a mediocre modeler?

### Domain Expertise

An expert who knows enough about all of the domains that are applicable is crucial. Imagine if someone said let's emulate an architect by having a construction worker and an artist work together. It's all too common for business to attempt to pair a business expert with an information technologist in the same way.

Unfortunately, this means that there's generally no easy way out of learning enough about finance, actuarial science, computers, and/or programming in order to be an effective modeler.

Also, a word of warning for the financial analysts out there: the computer scientists may find it easier to learn applied financial modeling than the other way around since the tools, techniques, and language of problem solving is already more a more general and flexible skill-set. There's more technologists starting banks than there are financiers starting technology companies.

### Model Theory

If it is granted that financial modeling must involve, as the essential part, a building up of modeler's knowledge, the next issue is to characterize that knowledge more explicitly. The modeler’s knowledge should be regarded as a theory, in the sense of Ryle's[^financial-modeling-practice-1] "Concept of the Mind." Very briefly: a person who has or possesses a theory in this sense knows how to do certain things and in addition can support the actual doing with explanations, justifications, and answers to queries, about the model and its results[^financial-modeling-practice-2].

[^financial-modeling-practice-1]: Ryle, G. The Concept of Mind. Harmondsworth, England, Penguin, 1963, first published 1949. Applying “Theory Building”

[^financial-modeling-practice-2]: The idea of "model theory" is adapted from Peter Naur's 1985 essay, "Programming as Theory Building". Indeed, this whole paragraph is only a slightly modified version of Naur's description of theory in the programming context.

A financial model is rarely left in a final state. Regulatory changes, additional mechanics, sensitivity testing, market dynamics, new products, and new systems to interact with force a model to undergo change and development through its entire life. And like a living thing, it must have nurturing caregivers. This metaphor sounds extended, but Naur's point is that unless the model also lives in the heads of its developers then it cannot successfully be maintained through time:

> "The conclusion seems inescapable that at least with certain kinds of large programs, the continued adaption, modification, and correction of errors in them, is essentially dependent on a certain kind of knowledge possessed by a group of programmers who are closely and continuously connected with them." - Peter Naur, Programming as Theory Building, page 395.

Assume that we need to adapt the model to fit a new product. One possessing a high degree of model theory includes:

-   the ability to describe the trade-offs between alternate approaches that would accomplish the desired change

-   relate the proposed change to the design of the current system and any challenges that will arise as a result of prior design decisions

-   provide a quantitative estimation for the impact the change will have: runtime, risk metrics, valuation changes, etc.

-   Analogize how the system works to themselves or to others

-   Describe key limitations that the model has and where it is most divorced from the reality it seeks to represent.

Abstractions and analogies of the system are a critical aspect of model theory, as the human mind cannot retain perfectly precise detail about how the system works in each sub-component. The ability to, at some times, collapse and compartmentalize parts of the model to limit the mental overload while at others recall important implementation details requires training - and is enhanced by learning concepts like those which will be covered in this book.

An example of how the right abstractions (and language describing those abstractions) can be helpful in simplifying the mental load:

Instead of:

*The valuation process starts by reading an extract into three tabs of the spreadsheet. A macro loops through the list of policies on the first tab and in column C it gives the name of the applicable statutory valuation ruleset. The ruleset is defined as the combination of (1) the logic in the macro in the "Valuation" VBA module with, (2) the underlying rate tables from the tabs named XXX to ZZZ, along with (3) the additional policy level detail on the second tab. The valuation projection is then run with the current policy values taken from the third tab of the spreadsheet and the resulting reserve (equal to the actuarial present value of claims) is saved and recorded in column J of the first tab. Finally, a pivot table is used to sum up the reserves by different groups.*

We could instead design the process so that the following could be said instead:

*Policy extracts are parsed into a `Policy` datatype which contains a subtype `ValuationKind` indicating the applicable statutory ruleset to apply. From there, we map the `valuation` function over the set of `Policy`s and perform an additive reduce to determine the total reserve.*

There are terminologies and concepts in the second example which we will develop over the course of this section of the book - we don't want to dwell on the details bright now. However, we do want to emphasize that the process itself being able to condensed down to descriptions that are much more meaningful to the understanding of the model is a key differentiator for a code-based model instead of spreadsheets. It is not exaggerating that we could develop a handful of compartmentalized logics such that our primary valuation process described above could look like this in real code:

``` julia
policies = parse(Policy,CSV.File("extract.csv")) 
reserve = mapreduce(+,value,policies)
```

We've abstracted the mechanistic workings of the model into concise and meaningful symbols that not only perform the desired calculations but also make it obvious to an informed but unfamiliar reader what it's doing.

`parse` , `mapreduce`, `+` , `value` , `Policy` are all imbued with meaning - the first three would be understood by any computer scientist by the nature of their training (and is training that this book covers). The last two are unique to our model and have "real world" meaning that our domain expert modeler would understand which analogizes very directly to the way we would suggest implementing the details of `value` or `Policy`. The benefit of this, again, is to provide tools and concepts which let us more easily develop model theory.

### Curiosity

By cultivating curiosity, modelers can drive innovation, uncover new insights, and continuously improve their models and understanding of financial systems.

No model, no matter how sophisticated, ever delivers a "final" answer. If anything, a good financial model sparks as many new questions as it answers. This is where the best modelers distinguish themselves: they nurture a healthy skepticism with surface-level explanations.

Take, for instance, the gnawing feeling you get when a model’s output seems “off” but you can’t quite put your finger on why. The untrained eye might chalk it up to randomness or let it slide, but genuine curiosity won't settle for a hand-wavy excuse. The itch to resolve every weird edge case or apparent contradiction, to ask “what if?” and “why not?” is the spark that propels a practitioner beyond rote calculation into discovery.

In practice, carrying curiosity into modeling means:

-   **Taking the time to poke holes in every story your model tells.** If two approaches give wildly different answers for the same scenario, don’t sweep that under the rug. Dig until you’ve either found the bug or learned a new subtlety.
-   **Going down rabbit holes.** Sometimes the best model improvements stem from following up on the “trivial” anomaly hiding in the the numerical 'blip' ever 12 months. Ask yourself: is there a structural reason, a missing piece of data, or an assumption that needs to be made explicit?
-   **Pursuing the “why” behind the numbers.** Instead of blindly running scenarios, become obsessed with the model’s behavior. If changing an input slightly has points has an outsized effect elsewhere, dig into the feedback mechanism that causes it.
-   **Challenging your own assumptions.** No matter how seasoned you are, ask foundational questions and reconsider the “obvious.” There are no dumb questions! You’d be surprised how many “everybody knows that” ideas are actually half-remembered lore.
-   **Learning from surprises.** Whenever the model spits out something bizarre, treat it like an opportunity rather than a headache. Sometimes the oddball result teaches you more about the system than any routine validation could.
-   **Trying new techniques and tools to keep your intellectual toolbox diverse.** Look for the overlap between different things, such as recognizing the similarities between different areas of practice, even if it's not your 'specialty'.

The best modelers I’ve worked with aren’t necessarily the flashiest coders or the most fluent in finance. They’re just relentless in their quest to not leave loose ends untied.

### Rigor

If curiosity is the fuel, rigor is the steering wheel. All of that wandering through the thickets of “why?” needs a reliable process to keep from becoming noise or hand-waving. Rigor is what separates “I think it works” from “Here’s why it works, and here are its limits.”

When developing a model it's important to ensure that assumptions and parameters are very clear, the methodology is in line with establish theory, inappropriate thought has been given to how the model will be used. Additionally one should be mindful of standards of practice. For example, professional actuarial societies have a long list of Actuarial Standards of Practice ("ASOPs"), some of which apply to modeling and the use of data that models ultimately rely on. Regardless of the applicable standards, many of them share these aspects of the best modelers:

-   **Document your thinking** as you go. Write it out, whether it’s in a code comment, a README, or your own notebook. If you can’t explain your logic and your parameters, you probably don’t understand them as well as you think.

-   **Demand evidence** for your choices—don’t just trust your gut or yesterday’s industry standard. Check your results against reality, not just an assumed “right answer.” This means obsessive test cases, sensitivity checks, and “could we break this?” scenarios.

-   **Hold the model to a higher standard than tradition requires**. Don’t just meet regulator norms if you can do better—set your own red-lines for quality, accuracy, and reproducibility.

-   **Don’t hide the warts**. Make uncertainty visible, not hypothetical. Annotate what’s based on thin data versus what’s on solid ground. Rigor means being honest about what you don’t know—or what the model simply can’t say.

-   **Lean on first principles.** Often times there will be a 'simpler' way to model something, but making explicit all components of an interaction can be illuminating. For example, if you have a complex, multi-leg transaction that 'works like exotic option ABC', don't always rely on that heuristic. Alternatively, model out each leg of the transaction for clarity and confirmation of your understanding.

A bad model can be worse than no model at all. Through rigorous efforts, a minimum standard of quality can be obtained.

### Clarity

“Clarity” means never losing sight of the fact your model is only as useful as it is understandable.

-   Precise language: Use well-defined terms and avoid ambiguity in communications. If a term has overloaded meanings (“reserve,” “duration,” “return”), either define it up front or pick a less ambiguous word.
-   Spell out your assumptions, not just your output. Make the philosophy and the scaffolding explicit—what did you leave in, what did you leave out, and why?
-   Visual communication: Utilize diagrams and visualizations to explain complex concepts. A simple stylized sketch rarely hurts and often helps.
-   Audience-appropriate communication: Adjust your explanations depending on whether you’re talking to other developers, business stakeholders, or end users.
-   Regular review: Periodically update documentation to ensure ongoing clarity and accuracy. If you woke up with amnesia, would the next steps seem obvious?

Clarity is about making your future self—and your colleagues—thankful, not furious, that you were ever given keyboard access.

### Humility

The world is complicated in ways we can sometimes describe and never fully anticipate. A humble modeler tries to understand what the model can and cannot claim. And in good faith will try to share the limitations the model has with stakeholders, such as saying something like "we have a lot of data for low-rate environments but rapidly rising environments haven't been observed in the dataset".

Irreducible & reducible (epistemic) uncertainty are critical concepts for a modeler to understand and communicate:

1.  Irreducible uncertainty: Also known as aleatoric uncertainty, this refers to the inherent randomness in a system that cannot be reduced by gathering more information.
    -   Examples include: future market fluctuations, individual policyholder behavior, or natural disasters.
2.  Reducible (epistemic) uncertainty: This type of uncertainty stems from a lack of knowledge and can potentially be reduced through further study or data collection.
    -   Examples include: parameter estimation errors, model specification errors, or data quality issues.

@tbl-uncertainties describes this in more detail. It's not always necessary to describe each of these types of uncertainty for every model but knowing your enemy is the first step in fighting it.

A humble modeler acknowledges these uncertainties and communicates them clearly to stakeholders. This avoids overconfidence in model predictions and keeps one open to new information and alternative perspectives. By maintaining a humble attitude, modelers can build trust with stakeholders and make more informed decisions based on model outputs.

::: landscape
+---------------------------------------+-------------------------------------------------------------------------------------------------+-----------------------------------+----------------------------------------------------------------------------------------------------------+
| **Type of Uncertainty**               | **Key Characteristics**                                                                         | **Reducibility**                  | **Example**                                                                                              |
+=======================================+=================================================================================================+===================================+==========================================================================================================+
| **Aleatory (Process) Uncertainty**    | \- Inherent randomness (aka “irreducible uncertainty”)\                                         | **Irreducible**                   | Rolling dice or coin flips; outcome is inherently uncertain despite full knowledge of initial state      |
|                                       | - Cannot be eliminated, even with perfect knowledge                                             |                                   |                                                                                                          |
+---------------------------------------+-------------------------------------------------------------------------------------------------+-----------------------------------+----------------------------------------------------------------------------------------------------------+
| **Epistemic (Parameter) Uncertainty** | \- Due to limited data/knowledge (aka “reducible uncertainty”)\                                 | **Reducible**\                    | Uncertainty in a model’s parameters (e.g., climate sensitivity) that can be refined with more research   |
|                                       | - Imperfect information or model parameters                                                     | (more data / improved modeling)   |                                                                                                          |
+---------------------------------------+-------------------------------------------------------------------------------------------------+-----------------------------------+----------------------------------------------------------------------------------------------------------+
| **Model Structure Uncertainty**       | \- Uncertainty about the correct model or framework\                                            | **Partially reducible\            | Linear vs. nonlinear models in complex systems; risk of omitting key variables or mis-specified dynamics |
|                                       | - Often considered a special subset of epistemic uncertainty                                    | **(better theory/model selection) |                                                                                                          |
+---------------------------------------+-------------------------------------------------------------------------------------------------+-----------------------------------+----------------------------------------------------------------------------------------------------------+
| **Deep (Knightian) Uncertainty**      | \- “Unknown unknowns”\                                                                          | **Not quantifiable**\             | Impact of radically new technology on society                                                            |
|                                       | - Probability distributions themselves are not well-defined or are fundamentally unquantifiable | (cannot assign probabilities)     |                                                                                                          |
+---------------------------------------+-------------------------------------------------------------------------------------------------+-----------------------------------+----------------------------------------------------------------------------------------------------------+
| **Measurement Uncertainty**           | \- Errors in data collection or instrument readings\                                            | **Partially reducible**\          | Instrument precision limits in experiments; calibration errors in sensor data                            |
|                                       | - Systematic biases or random errors in measurement                                             | (improved measurement methods)    |                                                                                                          |
+---------------------------------------+-------------------------------------------------------------------------------------------------+-----------------------------------+----------------------------------------------------------------------------------------------------------+
| **Operational Uncertainty**           | \- Uncertainty in implementation/execution\                                                     | **Partially reducible**\          | Surgical errors, system failures, or incorrect handling of a financial trade order                       |
|                                       | - Human error, mechanical failure, or miscommunication in processes                             | (better training/processes)       |                                                                                                          |
+---------------------------------------+-------------------------------------------------------------------------------------------------+-----------------------------------+----------------------------------------------------------------------------------------------------------+

: In attempting to model an uncertain world, we can be even more granular and specific in discussing sources of that uncertainty. This table summarizes commonly noted kinds of uncertainty that arise, and whether we can reduce the uncertainty by doing better (more data, better data, better models, etc.) or not. {#tbl-uncertainties}
:::

### Architecture

Any sufficiently complex project benefits from architectural thinking. Think of your model like a house: if you don’t plan the plumbing, you’ll have a mess down the line. Data should be separate from the logic and the model itself should not contain any substantial datum itself - instead dynamically load data from appropriate data stores and leave the "model" as the implementation of data *types* and algorithms.

-   Modular design: Break complex models into reusable, independent components.
-   Separation of concerns: Keep data, logic, and presentation layers distinct for better maintainability.
-   Scalability: Design models to handle increasing data volumes and complexity.
-   Maintainability: Use version control, stable interfaces, clear documentation, and automated tests.
-   Performance optimization: Use efficient data structures and algorithms to enhance model speed.
-   Security: Ensure proper data protection and regulatory compliance.

Don’t underestimate the value of a well-organized model: it’s how you scale from small prototypes to systems you can trust in production.

### Planning

When tackling a large problem, it helps to have a well-structured planning process. Specific to building a financial model, one should take steps that include:

1.  Clear objectives: Understand the purpose of the model and what questions it needs to answer.
2.  Scope definition: Determine the boundaries of the model, including what to include and what to exclude.
3.  Data assessment: Identify required data sources, assess data quality, and plan for data preparation.
4.  Methodology selection: Choose appropriate modeling techniques based on the problem and available data.
5.  Resource allocation: Estimate time and resources needed for model development, testing, and implementation.
6.  Stakeholder engagement: Identify key stakeholders and plan for their involvement throughout the modeling process.
7.  Risk assessment: Anticipate potential challenges and develop mitigation strategies.
8.  Timeline development: Create a realistic timeline with key milestones and deliverables.
9.  Documentation strategy: Plan for comprehensive documentation of assumptions, methodologies, and limitations.
10. Validation and testing approach: Outline strategies for model validation and testing to ensure reliability.
11. Implementation and maintenance plan: Who will have responsibility after the model achieves it's initial objectives?

Time invested at the planning stage often pays dividends through shorter model build times, fewer errors, and clarity from stakeholders at the start of the project. Additionally, it's often easier to make changes to a well-planned project halfway through since the necessary accommodations are more clearly defined.

### Essential Tools and Skills

An experienced professional is aware of a number of approaches that can be used in solving a problem. From heuristics that are able to be calculated on a napkin to complex economic models, the ability to draw on a wide tool set allows a practitioner to find the right solution for a given problem. It is the intention of this book to enumerate a number of additional approaches that may prove useful in practice. This includes both soft and hard skills, such as those in @tbl-toolset

+-----------------------------+-----------------------------------------------------------------------------------+
| Category                    | Examples                                                                          |
+=============================+===================================================================================+
| Diverse Modeling Techniques | -   Statistical methods (e.g. regression, time series analysis, machine learning) |
|                             | -   Optimization techniques (e.g. linear, non-linear, black-box)                  |
|                             | -   Simulation methods (e.g. monte-carlo, agent-based, seriatim)                  |
+-----------------------------+-----------------------------------------------------------------------------------+
| Software Proficiency        | -   Programming languages                                                         |
|                             | -   Database and data handling                                                    |
|                             | -   Proprietary tools (e.g. Bloomberg)                                            |
+-----------------------------+-----------------------------------------------------------------------------------+
| Financial Theory            | -   Asset pricing                                                                 |
|                             | -   Portfolio theory                                                              |
|                             | -   Risk Management frameworks                                                    |
+-----------------------------+-----------------------------------------------------------------------------------+
| Quantitative techniques     | -   Numerical methods and algorithms                                              |
|                             | -   Bayesian inference                                                            |
|                             | -   Stochastic calculus                                                           |
+-----------------------------+-----------------------------------------------------------------------------------+
| Soft Skills                 | -   Verbal and written communication                                              |
|                             | -   Stakeholder engagement                                                        |
|                             | -   Project Management                                                            |
+-----------------------------+-----------------------------------------------------------------------------------+

: A variety of skills have their place in the proficient financial modeler's toolbelt. {#tbl-toolset}

## Feeding The Model

If the soul of the model is its logic, then the lifeblood is its data. In practice, a model’s fate is often sealed not in the sophistication of its algorithms, but in the quality of the data it consumes. Even the most elegant model is helpless in the face of stale, sloppy, or misunderstood inputs.

### “Garbage In, Garbage Out”

Every experienced modeler has a story where a subtle data quirk led to a dramatic miscalculation—a column header shifted by one, a stale price feed, or a single outlier that quietly cascaded into a million-dollar mistake. The lesson: treat the data with every bit as much skepticism (and care) as you give the model itself.

### A Modeler’s Data Instincts

Rather than thinking of data handling as a rigid checklist, approach it as a series of habits and questions:

-   **Know Your Sources.** Where did this data come from? Who collected it, and how? Is it raw, or has someone already “cleaned” it in ways you need to understand (or undo)? Data provenance is not a formality—it’s the first step in understanding what can go wrong.
-   **Trust, But Verify.** Never take a dataset at face value, even if it comes from a trusted system. Run summary statistics. Plot the distributions. Check for the bizarre and the mundane: are dates reasonable, units consistent, and identifiers unique?
-   **Expect Messiness.** Real-world data is rarely pristine. Missing values, odd encodings, duplicated rows, and outliers are the norm, not the exception. The best modelers are part detective, part janitor: they track down wonky values, document their triage decisions, and know when to escalate a data quality concern upstream.
-   **Feature Engineering Is Judgment, Not Magic.** Choosing which fields to keep, combine, or discard is where domain expertise shines. Sometimes a new ratio or flag column, born from your unique understanding of the business, makes all the difference. Beware of “kitchen sink” modeling—too many features can obscure, rather than reveal, the truth.
-   **Be Wary of Temporal Traps.** Mixing data from different time periods, or accidentally leaking future information into a model (a classic error), can invalidate results without any warning sign. When in doubt, plot your data against time and look for jumps, gaps, or trends that defy explanation.
-   **Keep Data and Logic Separate.** As harped on earlier: don’t hard-code data into the model. Keep sources external, interfaces clean, and ingest paths well documented. If someone wants to rerun last year's scenario, they shouldn’t have to guess which tab or variable held the original rates.

### Data Is Never “Done”

Data handling is not a one-time hurdle to clear. Markets move, data feeds change, formats drift. Build routines to check for “data drift” and have a plan for periodic validations and refreshes.

A few practical tips:

-   Maintain a simple data log or data dictionary—even if informal—so others can trace what each field means and where it came from.
-   Automate the boring parts: validation scripts, input checks, and sanity tests pay off a hundredfold.
-   Version your datasets, just as you do your code. Nothing is more frustrating than trying to reproduce a result only to discover “the input file changed.” See @sec-data-version-control

Data is unruly, idiosyncratic, and absolutely central to every model’s fate. Treat it as a first-class concern, not an afterthought, and your models will be far sturdier for it. As a methodical guide, @tbl-data-to-model lists key steps to follow when bringing data into the model.

+--------------------------------------+----------------------------------------------------------+---------------------------------------------------------------------+
| **Step**                             | **Key Actions**                                          | **Purpose / Notes**                                                 |
+:=====================================+:=========================================================+:====================================================================+
| **Data Collection**                  | -   Identify sources                                     | Ensures data is relevant, reliable, and timely                      |
|                                      |                                                          |                                                                     |
|                                      | -   Acquire data (e.g., APIs, databases, scraping)       |                                                                     |
+--------------------------------------+----------------------------------------------------------+---------------------------------------------------------------------+
| **Data Exploration & Understanding** | -   Summary statistics                                   | Uncovers initial insights, errors, distributions, and relationships |
|                                      |                                                          |                                                                     |
|                                      | -   Visualization                                        |                                                                     |
|                                      |                                                          |                                                                     |
|                                      | -   Data profiling                                       |                                                                     |
+--------------------------------------+----------------------------------------------------------+---------------------------------------------------------------------+
| **Data Cleaning**                    | -   Handle missing values                                | Improves data quality, reduces noise and bias                       |
|                                      |                                                          |                                                                     |
|                                      | -   Detect/treat outliers                                |                                                                     |
|                                      |                                                          |                                                                     |
|                                      | -   Data transformation/formatting                       |                                                                     |
+--------------------------------------+----------------------------------------------------------+---------------------------------------------------------------------+
| **Data Preprocessing**               | -   Scale/normalize features                             | Prepare data so it fits the format and requirements of the model    |
|                                      |                                                          |                                                                     |
|                                      | -   Encode categorical variables                         |                                                                     |
|                                      |                                                          |                                                                     |
|                                      | -   Augment data (if needed) with other datasets         |                                                                     |
+--------------------------------------+----------------------------------------------------------+---------------------------------------------------------------------+
| **Feature Engineering**              | -   Select important features                            | Enhance or create new variables that improve model performance      |
|                                      |                                                          |                                                                     |
|                                      | -   Create new features (e.g., ratios, aggregates)       |                                                                     |
+--------------------------------------+----------------------------------------------------------+---------------------------------------------------------------------+
| **Data Splitting**                   | -   Divide into training, testing, (validation) sets     | Prevents overfitting and enables robust performance assessment      |
|                                      |                                                          |                                                                     |
|                                      | -   Apply cross-validation or static/dynamic validations |                                                                     |
+--------------------------------------+----------------------------------------------------------+---------------------------------------------------------------------+
| **Data Storage & Management**        | -   Store in databases/data lakes                        | Supports reproducibility, scalability, and reliable access          |
|                                      |                                                          |                                                                     |
|                                      | -   Maintain version control                             |                                                                     |
+--------------------------------------+----------------------------------------------------------+---------------------------------------------------------------------+
| **Ethical Considerations**           | -   Evaluate bias and fairness                           | Avoids perpetuating bias and protects sensitive information         |
|                                      |                                                          |                                                                     |
|                                      | -   Ensure privacy and regulatory compliance             |                                                                     |
+--------------------------------------+----------------------------------------------------------+---------------------------------------------------------------------+
| **Continuous Monitoring & Updating** | -   Monitor model/data performance                       | Maintains accuracy and relevance as data and conditions change      |
|                                      |                                                          |                                                                     |
|                                      | -   Detect data drift                                    |                                                                     |
|                                      |                                                          |                                                                     |
|                                      | -   Retrain/update as needed                             |                                                                     |
+--------------------------------------+----------------------------------------------------------+---------------------------------------------------------------------+

: Typical Steps in the Data-to-Model Process. {#tbl-data-to-model}

## Model Management

### Risk Governance

An effective risk governance framework for financial modeling begins with clearly stating why such oversight is necessary—namely, to prevent costly missteps in managing complex portfolios or complying with regulations. Organizations often adopt a written policy delineating responsibilities across different levels: management or board-level committees set high-level objectives, while operational teams handle day-to-day processes.

At the heart of this framework lies a structured model inventory, a catalog of all models in use that details each model’s purpose, assumptions, and present status (for example, whether it is in a prototype phase or fully deployed in production). This inventory helps institutions understand their cumulative exposure to errors or assumptions gone awry.

In practice, many firms adopt tiered risk classifications to decide how much scrutiny a model warrants. Classification schemes may range from “low impact” for small-scale financial calculators to “mission-critical” for enterprise valuation engines. Validation and testing approaches vary according to a model’s assigned tier.

Highly critical models undergo more extensive backtesting, benchmarking, or sensitivity analyses, with results escalated to senior management. Risk governance also encompasses ongoing monitoring and scheduled reports about model health. By publicizing validation findings and model performance metrics, the organization fosters a culture where potential failures are escalated early and openly, rather than hidden away until a crisis emerges.

### Change Management

No model remains static for long; assumptions evolve, new asset classes appear, and software libraries update. For this reason, a firm’s change management process should standardize how modifications are proposed, evaluated, and documented, ensuring continuity of both the model’s logic and the data that feeds it.

A central repository or version control system is essential: whenever the model or its associated data structures shift, the changes and their justifications must be recorded. This makes it easier to track lineage and revert to a prior version if an update proves problematic in a live environment. Later in this book, we will introduce modern version control systems and workflows that are facilitated by the code-based models that we develop.

Equally important is assessing the ripple effects of each change. Simplifying a routine or adjusting a discount rate assumption may be minor in isolation but can have broad implications when integrated across multiple components. Projects often require up-front impact assessments to determine which historical results need recalculating and whether stakeholder training or documentation updates are needed. One strategy, that of package and model version numbering schemes, will be described in @sec-julia-sharing.

Communication around changes should be systematic, distributing concise notes on new features, potential risks, and recommended usage practices to both internal users and (where relevant) regulators. Well-handled change management fosters stability and trust, enabling prompt innovation without sacrificing the reliability of the overall modeling ecosystem.

### Data Controls

Sound data controls are paramount in financial modeling because flawed or unverified inputs quickly undermine even the sturdiest model architecture. Organizations typically define data quality standards that address accuracy, completeness, and timeliness. These standards help detect common pitfalls, such as inconsistent formatting, delayed updates, or incorrect data mappings. Complementing formal policies, automated checks are often placed at ingestion points to spot irregularities—anything from out-of-range values that might indicate data corruption, to suspicious spikes hinting at a data input error.

Security and access protocols add another layer of protection. Role-based permission schemes or strong authentication measures minimize the risk of data tampering, accidental deletions, or unauthorized viewings of confidential information.

Although data versioning may sound like a software concept, it applies equally to financial datasets. Keeping a record of each dataset’s evolution allows managers and auditors to pinpoint when and how anomalies first appeared. Where legislation like GDPR or industry-specific regulations come into play, data controls must also reflect broader requirements about personal information, consent, and retention periods. Coordinating these efforts under a unified data governance approach ensures that model outputs stand on a solid factual foundation.

### Peer and Technical Review

Even the most experienced modelers benefit from additional eyes on their work. **Peer review**, whether informal or systematically mandated, identifies blind spots in assumptions, conceptual design, or coding. Though some organizations require independent reviewers who have not contributed to the original model, smaller teams may rely on a rotating schedule of internal experts sharing responsibility for checks. The key is cultivating a culture where open dialogue about potential faults is not only accepted but encouraged.

**Technical review** goes one step further, focusing on deeper verification of the computations themselves. Complex spreadsheets, code modules, or integrated software platforms may require structured walk-throughs in which reviewers verify arithmetic, confirm the alignment of calculation steps with business logic, or run test scenarios to ensure the model behaves as intended. This process should generate formal documentation capturing who performed the review, what methods they used, and which issues surfaced. Likewise, conceptual soundness—how well the model aligns with economic theory or domain-specific knowledge—merits discussion in a thorough review. If challenges are identified, revisions loop back into the change management system, promoting iterative refinements. By conducting peer and technical reviews in earnest, organizations reinforce consistent quality and reduce the likelihood of undetected errors slipping into production.

## Conclusion

The art and science of financial modeling require a unique blend of skills, knowledge, and personal qualities. A proficient modeler combines domain expertise, theoretical understanding, and practical skills with a curious and rigorous mindset. They leverage a diverse toolset, employ sound architectural principles, and communicate with clarity. The ability to navigate the complexities of financial systems while maintaining humility in the face of irreducible uncertainties is paramount.

As the financial world continues to evolve, so too must the modeler's approach. By cultivating these attributes and continuously refining their craft, financial modelers can create more robust, insightful, and valuable models that drive informed decision-making in an increasingly complex economic landscape. The journey of a financial modeler is one of perpetual learning and adaptation, where each challenge presents an opportunity for growth and innovation.
