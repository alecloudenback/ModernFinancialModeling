# Elements of Programming {#sec-elements-programming}

> "Programming is not about typing, it's about thinking." â€” Rich Hickey (2011)

## In this section

Start building up computer science concepts by introducing tangible programming essentials. Data types, variables, control flow, functions, and scope are introduced.

## Computer Science, Programming, and Coding

Computer Science is the study of computing and information. As a science, it is distinct from programming languages which are merely coarse implementations of specific computer science concepts[^foundations-of-programming-1]. Programming (or "coding") is the art and science of writing code in programming languages to have the computer perform desired tasks. While this may sound mechanistic, programming truly is one of the highest forms of abstract thinking and the design space of potential solutions is so large and potentially complex that much art and experience is needed to create a well-made program.

[^foundations-of-programming-1]: Said differently, computer science may contemplate ideas and abstractions more generally than a specific implementation, as in mathematics where a theorem may be proved ($a^2 + b^2 = c^2$) without resorting to specific numeric examples ($3^2 + 4^2 = 5^2$).

The language of computer science also provides a lexicon so that financial practitioners can discuss model architecture and problem characteristics. Having the language to describe a concept will also help see aspects of the problem in new ways, opening one up to more innovative solutions.

In the context of this financial modeling that we do, we can consider a financial model to be a type of computer program. It takes as input abstract information (data), performs calculations (an algorithm), and returns new data as an output. In this context, we generally do not need to consider many things that a software engineer may contemplate such as a graphical user interface, networking, or access restrictions. But there are many similarities: a good financial modeler must understand data types, algorithms, and some hardware details.

We will build up the concepts over this and the following chapter:

-   This chapter will provide a survey of important concepts in computer science that will prove useful for our financial modeling. First, we will talk about data types, boolean logic, and basic expressions. We'll build on those to discuss algorithms (functions) which perform useful work and use control flow and recursion.
-   The following chapter will step back and discuss higher level concepts: the "schools of thought" around organizing the relationship between data and functions (functional versus object-oriented programming), design patterns, computational complexity, and compilation.

::: callout-tip
There will be brief references to hardware considerations for completeness, but hardware knowledge is not necessary to understand most programming languages (including Julia). It's impossible to completely avoid talking about hardware when you care about the performance of your code, so feel free to gloss over the reference to hardware details on the first read and come back later after @sec-hardware.
:::

It's highly recommended that you follow along and have a Julia session open (e.g. a REPL or a notebook) when first going through this chapter. See @sec-julia-basics if you haven't gotten that set up yet. Follow along with the examples as we go.

::: callout-tip
You can get some help in the REPL by typing a `?` followed by the symbol you want help with, for example:

``` julia-repl
 help?> sum
search: sum sum! summary cumsum cumsum! isnumeric MethodSummary VersionNumber issubnormal get_zero_subnormals

  sum(f, itr; [init])


  Sum the results of calling function f on each element of itr.

... More text truncated...
```
:::

## Assignment and Variables

One of the first things it will be convenient to understand is the concept of variables. In virtually every programming language, we can assign values to make our program more organized and meaningful to the human reader. In the following example, we assign values to intermediate symbols to benefit us humans as we convert (silly!) American distance units:

```{julia}
feet_per_yard = 3
yards_per_mile = 1760

feet = 3000
miles = feet / feet_per_yard / yards_per_mile
```

Beyond readability, variables are a form of **abstraction** which allows us to think beyond specific instances of data and numbers to a more general representation. For example, the last line in the prior code example is a very generic computation of a unit conversion relationship and `feet` could be any number and the expression remains a valid calculation.

We will return to this subject in more detail in @ref-assignment.

## Data Types

Data types are a way of categorizing information by intrinsic characteristics. We instinctively know that `13.24` is different than `"this set of words"` and types are how we will formalize this distinction. This is a key conceptual point, and mathematically it's like we have different sets of objects to perform specialized operations on. Beyond this set-like abstraction is implementation details related to computer hardware. You probably know that computers only natively "speak" in binary zeros and ones. Data types are a primary way that a computer can understand if it should interpret `01000010` as `B` or as `66`[^foundations-of-programming-2].

[^foundations-of-programming-2]: This binary representations correspond to `B` and `66` with the *ASCII character set* and 8-bit integer encodings, discussed later in this chapter.

Each `0` or `1` within a computer is called a **bit** and eight bits in a row form a **byte** (such as `01000010` ). This is where we get terms like "gigabytes" or "kilobits per second" as a measure of the quantity or rate of bits something can handle[^foundations-of-programming-3].

[^foundations-of-programming-3]: Some distinctions you may encounter: in short-form, "kb" means kilo*bits* while the upper-case "B" in "kB" means kilo*bytes*. Also confusingly, sometimes the "k" can be binary or decimal - because computers speak in binary, a binary "k" means 1024 (equal to 2\^10) instead of the usual decimal 1000. In most computer contexts, the binary (multiples of 1024) is more common.

### Numbers {#sec-number-types}

Numbers are usually grouped into two categories: **integers** and **floating-point**[^foundations-of-programming-4] numbers. Integers are like the mathematical set of integers while floating-point is a way of representing decimal numbers. Both have some limitations since computers can only natively represent a finite set of numbers due to the hardware (more on this in @sec-hardware). Here are three integers that are input into the **REPL** (Read-Eval-Print-Loop)[^foundations-of-programming-5] and the result is **printed** below the input:

[^foundations-of-programming-4]: The term floating point refers to the fact that the number's radix (decimal) point can "float" between the significant digits of the number.

[^foundations-of-programming-5]: That is, it *reads* the code input from the user, *evaluates* what code was given to it, *prints* the result of the input to the screen, and *loops* through the process again.

```{julia}
2
```

```{julia}
423
```

```{julia}
1929234
```

And three floating-point numbers:

```{julia}
0.2
```

```{julia}
-23.3421
```

```{julia}
14e3      # the same as 14,000.0
```

On most systems, `0.2` will be interpreted as a 64-bit floating point type called `Float64` in Julia since most architectures these days are 64-bit[^foundations-of-programming-6], while on a 32-bit system `0.2` would be interpreted as a `Float32`. Given that there are a finite amount of bits attempting to represent a continuous, infinite set of numbers means that some numbers are not able to be represented with perfect precision. For example, if we ask for `0.2`, the closest representations in 64 and 32 bit are:

[^foundations-of-programming-6]: This means that their central processing units (CPUs) use instructions that are 64 bits long.

-   `0.20000000298023223876953125` in 32-bit

-   `0.200000000000000011102230246251565404236316680908203125` in 64-bit

This leads to special considerations that computers take when performing calculations on floating point maths, some of which will be covered in more detail in @sec-hardware. For now, just note that floating point numbers have limited precision and even if we input `0.2`, your computations will use the above decimal representations even if it will print out a number with fewer digits shown:

```{julia}
x = 0.2 # <1>

big(x) # <2>
```

1.  Here, we **assign** the value `0.2` to a **variable** `x`. More on variables/assignments in @sec-assignment.
2.  `big(x)` is a arbitrary precision floating point number and by default prints the full precision that was embedded in our variable `x`, which was originally `Float64`.

::: callout-note
Note the difference in what printed between the last example and when we input `0.2` earlier in the chapter. The former had the same (not-exactly equal to $0.2$) *value*, but it printed an abbreviated set of digits as a nicety for the user, who usally doesn't want to look at floating point numbers with their full machine precision. The system has the full precision (`0.20...3125`) but is truncating the ouput.

In the last example, we've converted the normal `Float64` to a `BigFloat` which will not truncate the output when printing.
:::

Integers are similarly represented as 32 or 64 bits (with `Int32` and `Int64`) and are limited to exact precision:

-   -32,767 to 32,767 for `Int32`

-   -2,147,483,647 to 2,147,483,647 for `Int64`

Additional range in the positive direction if one chooses to use "unsigned", non-negative numbers (`UInt32` and `UInt64`). Unlike floating point numbers, the integers have a type `Int` which will use the system bit architecture by default (that is, `Int(30)` will create a 64 bit integer on 64-bit systems and 32-bit on 32-bit systems)

### Type Hierarchy

We can describe a *hierarchy* of types. Both `Float64` and `Int64` are examples of `Real` numbers (here, `Real` is an **abstract** Julia type which corresponds to the mathematical set of real numbers commonly denoted with $\mathbb{R}$ ). Both `Float64` and `Int32` are `Real` numbers, so why not just define all numbers as a `Real` type? Because for performant calculations, the computer must know in advance how many bits each number is represented with.

@fig-julia-numeric-types shows the type hiearchy for most built-in Julia number types.

```{mermaid}
%%| label: fig-julia-numeric-types
%%| fig-cap: "Numeric Type Hierarchy in Julia. Leafs of the tree are concrete types."
%%| fig-width: 6.5
graph TD
    Number --> Real
    Number --> Complex

    Real --> Integer
    Real --> AbstractFloat
    Real --> Rational
    Real --> Irrational

    Integer --> Signed
    Integer --> Unsigned

    Signed --> Int8
    Signed --> Int16
    Signed --> Int32
    Signed --> Int64
    Signed --> Int128
    Signed --> BigInt

    Unsigned --> UInt8
    Unsigned --> UInt16
    Unsigned --> UInt32
    Unsigned --> UInt64
    Unsigned --> UInt128

    AbstractFloat --> Float16
    AbstractFloat --> Float32
    AbstractFloat --> Float64
    AbstractFloat --> BigFloat
```

The integer and floating point types described in the prior section are known as **concrete** types because there are no possible sub types (child types). Further, a concrete type can be a **bit type** if the data type will always have the same number of bits in memory: a `Float32` will always be 32 bits in memory, for example. Contrast this with strings (described below) which can contain an arbitrary number of characters.

### Arrays

::: column-margin
[î €]{.juliadots} Julia has very powerful and friendly array types.
:::

Arrays are the most common way to represent a collection of similar data. For example, we can represent a set of integers as follows:

```{julia}
[1, 10, 300]
```

And a floating point array:

```{julia}
[0.2, 1.3, 300.0]
```

Note the above two arrays are different types of arrays. The first is `Vector{Int64}` and the second is `Vector{Float64}`. These are arrays of concrete types and so Julia will know that each element of an array is the same amount of bits which will enable more efficient computations. With the following set of mixed numbers, Julia will **promote** the integers to floating point since the integers can be accurately represented[^foundations-of-programming-7] in floating point.

[^foundations-of-programming-7]: Accurate only to a limited precision, as described in @sec-number-types.

```{julia}
[1, 1.3, 300.0, 21]
```

However, if we explicitly ask Julia to use a `Real`-typed array, the type is now `Vector{Real}`. Recall that `Real` is an abstract type. Having heterogeneous types within the array is conceptually fine, but in practice limits performance. Again, this will be covered in more detail in @sec-hardware.

In Julia, arrays can be multi-dimensional. Here are are two three-dimensional arrays with length three in each dimension:

```{julia}
rand(3, 3, 3)
```

```{julia}
[x + y + z for x in 1:3, y in 11:13, z in 21:23]
```

The above example demonstrates **array comprehension** syntax which is a convienient way to create arrays in Julia.

A two-dimensional array has the rows by semi-colons (`;`):

```{julia}
x = [1 2 3; 4 5 6]
```

::: callout-note
In Julia, a `Vector{Float64}` is simply a one-dimensional array of floating pointsand a `Matrix{Float64}` is a two-dimentional array. More precisely, they are **type aliases** of the more generic `Array{Float64,1}` and `Array{Float64,2}` names.
:::

#### Array indexing

Array elements are accessed with the integer position, starting at `1` for the first element[^foundations-of-programming-8] [^foundations-of-programming-9]:

[^foundations-of-programming-8]: Whether an index starts at `1` or `0` is sometimes debated. Zero-based indexing is natural in the context of low-level programming which deal with bits and positional *offsets* in computer memory. For higher level programming one-based indexing is more natural: in a set of data stored in an array, it is much more natural to reference the *first* (through $n^{th}$) datum instead of the *zeroth* (through $(n-1)^{th}$ datum.

[^foundations-of-programming-9]: Arrays in Julia can actually be indexed with an arbitrary starting point: see the package [OffsetArrays.jl](https://github.com/JuliaArrays/OffsetArrays.jl)

```{julia}
v = [10, 20, 30, 40, 50]
v[2]
```

We can also access a subset of the vector's contents by passing a range:

```{julia}
v[2:4]
```

And we can generically reference the array's contents, such as:

```{julia}
v[begin+1:end-1]
```

We can assign values into the array as well, as well as combine arrays and push new elements to the end:

```{julia}
v[2] = -1
push!(v, 5)
vcat(v, [1, 2, 3])
```

### Characters, Strings, and Symbols

Characters are represented in most programming languages as letters within quotation marks. In Julia, individual characters are represented using single quotes:

```{julia}
'a'
```

Letters and other characters present more difficulties than numbers to represent within a computer (think of how many languages and alphabets exist!), and it essentially only works because the world at large has agreed to a given representation. Originally **ASCII** (American Standard Code for Information Interchange) was used to represent just 95 of the most common English characters ("a" through "z", zero through nine, etc.). Now, UTF (Unicode Transformation Format) can encode more than a million characters and symbols from many human languages.

**Strings** are a collection[^foundations-of-programming-10] of characters, and can be created in Julia with double quotes:

[^foundations-of-programming-10]: Under the hood, strings are essentially a vector of characters but there are complexities with character encoding that don't allow a lossless conversion to individual characters of uniform bit length. This is for historical compatibility reasons and to avoid making most documents' file sizes larger than it needs to be.

```{julia}
"hello world"
```

It's easy to ascertain how 'normal' characters can be inserted into a string, but what about things like new lines or tabs? They are represented by their own characters but are normally not printed in computer output. However, those otherwise invisible characters do exist. For example, here we will use a **string literal** (indicated by the `"""` ) to tell Julia to interpret the string as given, including the invisible new line created by hitting return on the keyboard between the two words:

```{julia}
"""
hello
world
"""
```

The output above shows the `\n` character contained within the string.

**Symbols** are a way of representing an identifier which cannot be seen as a collection of individual characters. `:helloworld` is distinct from `"helloworld"` - you can kind of think of the former as an un-executed bit of code - if we were to execute it (with `eval(:helloworld)`), we would get an error `` UndefVarError: `a` not defined `` . Symbols can *look* like strings but do not behave like them. For now, it is best to not worry about symbols but it is an important aspect of Julia which allows the language to represent aspects of itself as data. This allows for powerful self-reference and self-modification of code but this is a more advanced topic generally out of scope of this book.

### Tuples

Tuples are a set of values that belong together and are denoted by a values inside parenthesis and separated by a comma. An example might be x-y coordinates in 2 dimensional space:

```{julia}
x = 3
y = 4
p1 = (x, y)
```

Tuple's values can be accessed like arrays:

```{julia}
p1[1]
```

Tuples fill a middle ground between scalar types and arrays in more ways that one:

-   Tuples have no problem having heterogeneous types in the different slots.

-   Tuples are **immutable**, meaning that you cannot overwrite the value in memory (an error will be thrown if we try to do `p[1] = 5`).

-   It's generally expected that within an array, you would be able to apply the same operation to all the elements (e.g. square each element) or do something like sum all of the elements together which isn't generally case for a tuple.

-   Tuples are generally stack allocated instead of being heap allocated like arrays[^foundations-of-programming-11], meaning that a lot of times they can be faster than arrays.

[^foundations-of-programming-11]: What this means will be explained in @sec-hardware .

#### Named Tuples

Named tuples provide a way to give each field within the tuple a specific name. For example, our x-y coordinate example above could become:

```{julia}
p2 = (x=3, y=4)
```

The benefit is that we can give more meaning to each field and access the values in a nicer way. Previously, we used `location[1]` to access the x-value, but with the new definition we can access it by name:

```{julia}
p2.x
```

### Parametric Types

We just saw how tuples can contain heterogeneous types of data inside a common container. Let's look at this a little bit closer by looking at the full type:

```{julia}
typeof(p1)
```

`location` is a `Tuple{Int64,Int64}` type, which means that its first and second elements are both `Int64`. Contrast this with:

```{julia}
typeof(("hello", 1.0))
```

These tuples are both of the form `Tuple{T,U}` where `T` and `U` are both types. Why does this matter? We and the compiler can distinguish between a `Tuple{Int64,Int64}` and a `Tuple{String,Float64}` which allows us to reason about things ("I can add the first element of tuple together only if both are numbers") and the compiler to optimize (sometimes it can know exactly how many bits in memory a tuple of a certain kind will need and be more efficient about memory use). Further, we will see how this can become a powerful force in writing appropriately abstracted code and more logically organize our entire program when we encounter "multiple dispatch" later on.

### Creating User Defined Types

We've talked about some built-in types but so much additional capabilities come from being able to define our own types. For example, taking the x-y-coordinate example from above, we could do the following instead of defining a tuple:

```{julia}
struct BasicPoint
    x::Int64
    y::Int64
end

p3 = BasicPoint(3, 4)
```

Fields are accessed the same way as named tuples:

```{julia}
p3.x, p3.y # <1>
```

1.  Note that here, Julia will return a tuple instead of a single value due to the comma separated expressions.

`structs` in Julia are immutable like tuples above.

But wait, didn't tuples let us mix types too via parametric types? Yes, and we can do the same with our type!

```{julia}
struct Point{T}
    x::T
    y::T
end
```

Line 1 The `{T}` after the type's name allows for different `Point`s to be created depending on what the type of the underlying `x` and `y` is.

Here's two new points which now have different types:

```{julia}
p4 = Point(1, 4)
p5 = Point(2.0, 3.0)

p4, p5
```

Note that the types are not equal because they have different type parameters!

```{julia}
typeof(p4), typeof(p5), typeof(p4) == typeof(p5)
```

But both are now subtypes of `PPoint2D`. The expression `X isa Y` is `true` when `X` is a (sub)type of `Y`:

```{julia}
p4 isa Point, p5 isa Point
```

Note though, that the `x` and `y` are both of the same type in each `PPoint2D` that we created. If instead we wanted to allow the coordinates to be of different types, then we could have defined `PPoint2D` as follows:

``` julia
struct Point{T,U}
    x::T
    y::U
end
```

::: callout-note
Can we define the `struct`s above without indicating a (parametric) type? Yes!

``` julia
struct Point
    x # no type here!
    y # no type declared here either!
end
```

But! `x` and `y` will both be allowed to be `Any`, which is the fallback type where Julia says that it doesn't know any more about the type until runtime (the time at which our program encounters the data when running). This means that the compiler (and us!) can't reason about or optimize the code as effectively as when the types are explicit or parametric. This is an example of how Julia can provide a nice learning curve - don't worry about the types until you start to get more sophicistited about the program design or need to extract more performance from the code.
:::

The above `struct`s that we have defined are examples of **concrete types** types which hold data. **Abstract types** don't directly hold data themselves but are used to define a hiearchy of types which we will later exploit (@sec-patterns-abstractions) to implement custom behavior depending on what type our data is.

Here's an example of (1) defining a set of related types that sits above our `Point2D`:

```{julia}
#| output: false
abstract type Coordinate end
abstract type CartesianCoordinate <: Coordinate end
abstract type PolarCoordinate <: Coordinate end

struct Point2D{T} <: CartesianCoordinate
    x::T
    y::T
end

struct Point3D{T} <: CartesianCoordinate
    x::T
    y::T
    z::T
end

struct Polar2D{T} <: PolarCoordinate
    r::T
    Î¸::T
end
```

::: callout-tip
## Unicode Characters

Julia has wonderful Unicode support, meaning that it's not a problem to include characters like `Î¸`. The character can be typed in Julia editors by entering `\theta` and then pressing the TAB key on the keyboard.

Unicode is helpful for following conventions that you may be used to in math. For example, the math formula $\text{circumference}(r) = 2 \times r \times \pi$ can be written in Julia with `circumference(r) = 2 * r * Ï€`.

The name for the characters follows the same for LaTeX, so you can search the internet for,e.g. "theta LaTeX" to find the appropriate name. Furhter, you can use the REPL help mode to find out how to enter a character if you can copy and paste it from somewhere:

``` julia-repl
help?> Î¸
"Î¸" can be typed by \theta<tab>
```
:::

### Mutable structs

It is possible to define `struct`s where the data can be modified - such a data field is said to be **mutable** because it can be changed or mutated. Here's an example of what it would look like if we made `Point2D` mutable:

``` julia
mutable struct Point2D{T}
    x::T
    y::T
end
```

You may find that this more naturally represents what you are trying to do. However, recall that an advantage of an immutable datatype is that costly memory doesn't necessarily have to be allocated for it. So you may think that you're being more efficient by re-using the same object... but it may not actually be faster. Again, more will be revealed in @sec-hardware.

::: callout-tip
## Financial Modeling Pro-tip

Generally you should default to using immutable types and consider only moving to `mutable` types in specific circumstances. You'll see some examples in the applications later in the book.
:::

## Expressions and Control Flow

Having already seen some more illustrative examples above, we can zoom in onto smaller pieces called **expressions** which are effectively the basic block of code that gets evaluated. Here is an expression that adds two integers together that evaluate to a new integer (`3` in this case):

```{julia}
1 + 2
```

### Compound Expression

There's two kinds of blocks where we can ensure that subexpressions get evaluated in order and return the last expression as the overall return value: `begin` and `let` blocks.

```{julia}
c = begin
    a = 3
    b = 4
    a + b
end

a, b, c
```

The variables inside the `begin` block are evaluated in the same scope as `c` and therefore have the assigned values when we call `a` and `b` in the last line. Contrast that with the `let` block below, where `d` and `e` are not available when we try to get the value of `f`. This is because `let` creates a new inner scope that's not available in `f`'s scope. More on scope later in the chapter.

```{julia}

f = let
    d = 1
    e = 2
    d + e
end
f
```

```{julia}
#| error: true
d
```

### Conditional Expressions

**Conditionals** are expressions that evaluate to a **boolean** `true` or `false`. This is the beginning of really being able to assemble complex logic to perform useful work. Here are a handful expressions that would evaluate to `true`:

```         
1 > 0
1 == 1
Float64 isa Rational
(5 > 0) & (-1 < 2) # "and" expression
(5 > 0) | (-1 > 2) # "or" expression
1 != 2
```

#### Equality

The "Ship of Theseus[^foundations-of-programming-12]" problem is an example of how equality can be philosophically complex concept. In computer science we have the advantage that while we may not be able to resolve what's the "right" type of equality, we can be more precise about it.

[^foundations-of-programming-12]: The Ship of Theseus problem specifically refers to a legendary ancient Greek ship, owned by the hero Theseus. The paradox arises from the scenario where, over time, each wooden part of the ship is replaced with identical materials, leading to the question of whether the fully restored ship is still the same ship as the original. The Ship of Theseus problem is a thought experiment in philosophy that explores the nature of identity and change. It questions whether an object that has had all of its components replaced remains fundamentally the same object.

Here is an example for which we can see the difference between two types of equality:

-   **Egal** equality is when a program could not distinguish between two objects at all

-   **Equal** equality is when the values of two objects are the same

If two things are egal, then they are also equal.

In the following example, `s` and `t` are equal but not egal:

```{julia}
s = [1, 2, 3]
t = [1, 2, 3]
s == t, s === t
```

One way to think about this is that while the values are equal, there is a way that one of the arrays could be made not equal to the other:

```{julia}
t[2] = 5
t
```

Now `t` is no longer equal to `s`:

```{julia}
s == t
```

Recall that arrays are able to be modified, but other types like tuples are immutable. Immutable types with the same value are egal because there is no way for us to make them different:

```{julia}
(2, 4) === (2, 4)
```

Using this terminology, we could now interpret the "Ship of Theseus" as that his ship is "equal" but not "egal".

### More on Assignment and Variables {#sec-assignment}

### Operators

unary/binary

## Functions

### Broadcasting

## Scope

### Local Scope

### Global Scope

### Modules

::: callout-note
Summarizing related terminology:

-   A **module** is a block of code such as `module MySimulation ... end`

-   A **package** is a module that has a specific set of files and associated metadata. Essentially, it's a module with a `Project.toml` file that has a name and unique identifier listed, and a file in a `src/` directory called `MySimulation.jl`

    -   **Library** is just another name for a package, and the most common context this comes up is when talking about the packages that are bundled with Julia itself called the **standard library** (`stdlib`).
:::